#+TITLE: This is an Org Mode file.
#+DATE: <2018-01-10>
#+AUTHOR: Tim Hawes
#+EMAIL: tim@selfdidactic.com
#+HTML_CONTAINER: div
* This is the outer section
** This is an inner section
   Inner section body -- /with italic text/!  And *bold text* too.
   - Plain List Item 1
   - Plain List Item 2
   [[http://eigenhombre.com][A link to a Web site]]

   Lisp code
   #+BEGIN_SRC lisp
   (defparameter *foo* "hello-world")

   (defun foo-func (bar)
       (format t "Hello, ~A~%" bar))
   #+END_SRC

   C code
   #+BEGIN_SRC c
   #include <stdio.h>

   int main(int argc, char **argv) {
       puts("Hello, World!");
       return 0;
   }
   #+END_SRC

   Some Python
   #+BEGIN_SRC python
   class Foo:
       def __init__(self):
           self.var1 = "foo"

       def run(self):
           print("{}".format(self.var1))

   if __name__ == "__main__":
       f = Foo()
       f.run()
   #+END_SRC

   Some shell
   #+BEGIN_SRC shell
   for x in $(find /tmp -type f -print0|xargs -0 grep -i foobar);do
       echo $x
   done
   #+END_SRC

   Some Clojure
   #+BEGIN_SRC clojure
   (ns ancillary.execution-handler
       (:require [clojure.java.shell :as shell]
                 [clojure.data.json :as json]))

   (defn exec-sh
       "Executes and handles shell commands."
       [command]
       (let [result (shell/sh "bash" "-c" command)]
           (cond (= (get result :exit) 0) (def status 200)
                 :else (def status 510))
           {:status status
            :header {"Content-Type" "application/json"}
            :body (json/write-str
                 {:stdout (get result :out)
                  :stderr (get result :err)})}))
   #+END_SRC
